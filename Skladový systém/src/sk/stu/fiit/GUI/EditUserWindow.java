/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sk.stu.fiit.GUI;

import java.awt.event.MouseAdapter;
import java.util.ResourceBundle;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import sk.stu.fiit.InternationalizationClass;

/**
 * Trieda predstavujúca obrazovku pre úpravu používateľa.
 *
 * @author Ivan Vykopal
 */
public class EditUserWindow extends javax.swing.JFrame {
    
    /** Atribút bundle predstavuje súbor s aktuálnou jazykovou verziou. **/
    private final ResourceBundle bundle = InternationalizationClass.getBundle();

    /**
     * Creates new form EditUserWindow
     */
    public EditUserWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnChooseUser = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tfUsername = new javax.swing.JTextField();
        tfName = new javax.swing.JTextField();
        tfEmail = new javax.swing.JTextField();
        btnEditUser = new javax.swing.JButton();
        cbType = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbUsers = new javax.swing.JTable();
        cbTypeFilter = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        tfFilter = new javax.swing.JTextField();
        btnFilter = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(bundle.getString("EDIT_USER_TITLE"));
        setPreferredSize(new java.awt.Dimension(1400, 1000));
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jScrollPane3.setPreferredSize(new java.awt.Dimension(1000, 800));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1000, 1400));
        jPanel1.setRequestFocusEnabled(false);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 0, 25)); // NOI18N
        jLabel1.setText(bundle.getString("CHOOSE_USER_LB"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(25, 50, 25, 50);
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 25)); // NOI18N
        jLabel2.setText(bundle.getString("EDIT_INFO_LB"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(25, 50, 25, 50);
        jPanel1.add(jLabel2, gridBagConstraints);

        btnChooseUser.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnChooseUser.setText(bundle.getString("CHOOSE_USER_BTN"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(25, 0, 25, 100);
        jPanel1.add(btnChooseUser, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel3.setText(bundle.getString("USER_USERNAME") + ":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 250, 25, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel4.setText(bundle.getString("USER_NAME") + ":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 250, 25, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel6.setText(bundle.getString("USER_EMAIL") + ":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 250, 25, 0);
        jPanel1.add(jLabel6, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel7.setText(bundle.getString("USER_TYPE") + ":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 250, 25, 0);
        jPanel1.add(jLabel7, gridBagConstraints);

        tfUsername.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 500, 0, 50);
        jPanel1.add(tfUsername, gridBagConstraints);

        tfName.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 500, 0, 50);
        jPanel1.add(tfName, gridBagConstraints);

        tfEmail.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 500, 0, 50);
        jPanel1.add(tfEmail, gridBagConstraints);

        btnEditUser.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnEditUser.setText(bundle.getString("EDIT_USER_BTN2"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.insets = new java.awt.Insets(25, 0, 25, 0);
        jPanel1.add(btnEditUser, gridBagConstraints);

        cbType.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        cbType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { bundle.getString("ADMINISTRATOR"), bundle.getString("REFERENT"), bundle.getString("WAREHOUSEMAN") }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 500, 25, 200);
        jPanel1.add(cbType, gridBagConstraints);

        tbUsers.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbUsers.getTableHeader().setFont(new java.awt.Font("Arial", 1, 15));
        tbUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                bundle.getString("USER_USERNAME"), bundle.getString("USER_NAME"), bundle.getString("EMAIL"), bundle.getString("USER_TYPE")
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbUsers);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 1000;
        gridBagConstraints.ipady = 500;
        gridBagConstraints.insets = new java.awt.Insets(25, 50, 25, 50);
        jPanel1.add(jScrollPane1, gridBagConstraints);

        cbTypeFilter.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        cbTypeFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { bundle.getString("ADMINISTRATOR"), bundle.getString("REFERENT"), bundle.getString("WAREHOUSEMAN") }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(25, 0, 25, 0);
        jPanel1.add(cbTypeFilter, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel5.setText(bundle.getString("FILTER_LB") + ":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 50, 25, 0);
        jPanel1.add(jLabel5, gridBagConstraints);

        tfFilter.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tfFilter.setMinimumSize(new java.awt.Dimension(250, 28));
        tfFilter.setPreferredSize(new java.awt.Dimension(250, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 150, 25, 0);
        jPanel1.add(tfFilter, gridBagConstraints);

        btnFilter.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnFilter.setText(bundle.getString("FILTER_BTNL"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 450, 25, 0);
        jPanel1.add(btnFilter, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 35)); // NOI18N
        jLabel9.setText(bundle.getString("EDIT_USER_TITLE"));
        jLabel9.setPreferredSize(new java.awt.Dimension(300, 41));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel1.add(jLabel9, gridBagConstraints);

        jScrollPane3.setViewportView(jPanel1);

        getContentPane().add(jScrollPane3);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChooseUser;
    private javax.swing.JButton btnEditUser;
    private javax.swing.JButton btnFilter;
    private javax.swing.JComboBox<String> cbType;
    private javax.swing.JComboBox<String> cbTypeFilter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tbUsers;
    private javax.swing.JTextField tfEmail;
    private javax.swing.JTextField tfFilter;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfUsername;
    // End of variables declaration//GEN-END:variables

    /**
     * Metóda pre získanie výberového pola.
     * 
     * @return výberové pole pre typ používateľa
     */
    public JComboBox<String> getCbType() {
        return cbType;
    }

    /**
     * Metóda pre získanie tabuľky používateľov.
     * 
     * @return tabuľka používateľov
     */
    public JTable getTbUsersTable() {
        return tbUsers;
    }
    
    /**
     * Metóda pre získanie modelu tabuľky používateľov.
     * 
     * @return model tabuľky používateľov
     */
    public DefaultTableModel getTbUsersModel() {
        return (DefaultTableModel) tbUsers.getModel();
    }

    /**
     * Metóda pre získanie e-mailu používateľa.
     * 
     * @return text z textového poľa
     */
    public String getTfEmail() {
        return tfEmail.getText().trim();
    }

    /**
     * Metóda pre získanie mena používateľa.
     * 
     * @return text z textového poľa
     */
    public String getTfName() {
        return tfName.getText().trim();
    }

    /**
     * Metóda pre získanie používateľského mena.
     * 
     * @return text z textového poľa
     */
    public String getTfUsername() {
        return tfUsername.getText().trim();
    }

    /**
     * Metóda pre nastavenie typu používateľa vo výberovom poli.
     * 
     * @param type typ používateľa
     */
    public void setCbType(sk.stu.fiit.Model.Type type) {
        switch(type) {
            case ADMINISTRATOR: 
                this.cbType.setSelectedIndex(0);
                break;
            case REFERENT: 
                this.cbType.setSelectedIndex(1);
                break;
            default: 
                this.cbType.setSelectedIndex(2);
                break;
        }
    }

    /**
     * Metóda pre nastavenie hodnoty v textovom poli.
     * 
     * @param text hodnota pre textové pole
     */
    public void setTfEmail(String text) {
        this.tfEmail.setText(text);
    }

    /**
     * Metóda pre nastavenie hodnoty v textovom poli.
     * 
     * @param text hodnota pre textové pole
     */
    public void setTfName(String text) {
        this.tfName.setText(text);
    }

    /**
     * Metóda pre nastavenie hodnoty v textovom poli.
     * 
     * @param text hodnota pre textové pole
     */
    public void setTfUsername(String text) {
        this.tfUsername.setText(text);
    }

    /**
     * Metóda pre získanie výberového pola pre filtráciu.
     * 
     * @return výberové pole pre typ používateľa pre filtráciu
     */
    public JComboBox<String> getCbTypeFilter() {
        return cbTypeFilter;
    }

    /**
     * Metóda pre získanie hodnoty filtra.
     * 
     * @return text z textového poľa
     */
    public String getTfFilter() {
        return tfFilter.getText().trim();
    }
    
    /**
     * Metóda pre pridanie Mouselistenera pre tlačidlo.
     * 
     * @param mouseAdapter listener pre stlačenia tlačidla
     */
    public void btnEditUserAddMouseListener(MouseAdapter mouseAdapter) {
        btnEditUser.addMouseListener(mouseAdapter);
    }
    
    /**
     * Metóda pre pridanie Mouselistenera pre tlačidlo.
     * 
     * @param mouseAdapter listener pre stlačenia tlačidla
     */
    public void btnChooseUserAddMouseListener(MouseAdapter mouseAdapter) {
        btnChooseUser.addMouseListener(mouseAdapter);
    }
    
    /**
     * Metóda pre pridanie Mouselistenera pre tlačidlo.
     * 
     * @param mouseAdapter listener pre stlačenia tlačidla
     */
    public void btnFilterAddMouseListener(MouseAdapter mouseAdapter) {
        btnFilter.addMouseListener(mouseAdapter);
    }
    
}
