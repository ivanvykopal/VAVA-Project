/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sk.stu.fiit.GUI;

import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ResourceBundle;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import sk.stu.fiit.Controllers.IMethod;
import sk.stu.fiit.CustomLogger;
import sk.stu.fiit.InternationalizationClass;

/**
 * Trieda predstavujúca obrazovku pre prihláseného skladníka.
 *
 * @author Ivan Vykopal
 */
public class WarehousemanWindow extends javax.swing.JFrame {
    
    /** Atribút bundle predstavuje súbor s aktuálnou jazykovou verziou. **/
    private final ResourceBundle bundle = InternationalizationClass.getBundle();

    /**
     * Creates new form GoodsReceiptWindow
     */
    public WarehousemanWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSeparator1 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        pGoodsReceipt = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbFreeStorage = new javax.swing.JTable();
        jLabel13 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tfGoodsCode = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfQuantity = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tfStorageCode = new javax.swing.JTextField();
        btnAcceptGoods = new javax.swing.JButton();
        cbStorageStatus = new javax.swing.JCheckBox();
        jPanel10 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        pLogin = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        btnGoodsReceipt = new javax.swing.JButton();
        btnGoodsMove = new javax.swing.JButton();
        btnGoodsExport = new javax.swing.JButton();
        btnShowStorage = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        lbName = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        btnChangePassword = new javax.swing.JButton();
        lbUsername = new javax.swing.JLabel();
        spGoodsMove = new javax.swing.JScrollPane();
        pGoodsMove = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbFreeStorage1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        tfQuantity1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tfStorageCode1 = new javax.swing.JTextField();
        btnMoveGoods = new javax.swing.JButton();
        chbStorageStatus1 = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbGoods = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        lbChoosedItem = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        spGoodsExport = new javax.swing.JScrollPane();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbGoods1 = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnExportGoods = new javax.swing.JButton();
        lbChoosedItem1 = new javax.swing.JLabel();
        tfQuantity2 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        spGoodsInfo = new javax.swing.JScrollPane();
        jPanel9 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        cbStorageOption = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        tfCodeFilter = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        tbStoragePositions = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        miLoginPage = new javax.swing.JMenuItem();
        miChangePassword = new javax.swing.JMenuItem();
        miLogout = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        miExit = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        miGoodsReceipt = new javax.swing.JMenuItem();
        miGoodsMove = new javax.swing.JMenuItem();
        miGoodsExport = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        miShowStorage = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        miAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(bundle.getString("WAREHOUSEMAN_TITLE"));
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jPanel3.setLayout(new java.awt.CardLayout());

        pGoodsReceipt.setMinimumSize(new java.awt.Dimension(1024, 580));
        pGoodsReceipt.setLayout(new java.awt.BorderLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(500, 600));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 200));

        tbFreeStorage.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbFreeStorage.getTableHeader().setFont(new java.awt.Font("Arial", 1, 15));
        tbFreeStorage.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                bundle.getString("FREE_STORAGE_TB")
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbFreeStorage);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 50, 50);
        jPanel2.add(jScrollPane1, gridBagConstraints);

        jLabel13.setFont(new java.awt.Font("Arial", 0, 25)); // NOI18N
        jLabel13.setText(bundle.getString("FREE_STORAGE_LB"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel2.add(jLabel13, gridBagConstraints);

        pGoodsReceipt.add(jPanel2, java.awt.BorderLayout.LINE_START);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel1.setText(bundle.getString("GOODS_CODE") + ":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(50, 50, 50, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        tfGoodsCode.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.insets = new java.awt.Insets(50, 100, 50, 100);
        jPanel1.add(tfGoodsCode, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel2.setText(bundle.getString("QUANTITY") + ":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(50, 50, 50, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        tfQuantity.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.insets = new java.awt.Insets(50, 100, 50, 100);
        jPanel1.add(tfQuantity, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel3.setText(bundle.getString("STORAGE_CODE") + ":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(50, 50, 50, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        tfStorageCode.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.insets = new java.awt.Insets(50, 100, 50, 100);
        jPanel1.add(tfStorageCode, gridBagConstraints);

        btnAcceptGoods.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnAcceptGoods.setText(bundle.getString("GOODS_RECEIPT_BTN"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.insets = new java.awt.Insets(50, 0, 50, 0);
        jPanel1.add(btnAcceptGoods, gridBagConstraints);

        cbStorageStatus.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        cbStorageStatus.setText(bundle.getString("STORAGE_FILL_CHB"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel1.add(cbStorageStatus, gridBagConstraints);

        pGoodsReceipt.add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setLayout(new java.awt.GridBagLayout());

        jLabel8.setFont(new java.awt.Font("Arial", 0, 35)); // NOI18N
        jLabel8.setText(bundle.getString("GOODS_RECEIPT_TITLE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel10.add(jLabel8, gridBagConstraints);

        pGoodsReceipt.add(jPanel10, java.awt.BorderLayout.PAGE_START);

        jPanel3.add(pGoodsReceipt, "card2");

        pLogin.setBackground(new java.awt.Color(255, 255, 255));
        pLogin.setLayout(new java.awt.BorderLayout());

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        btnGoodsReceipt.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnGoodsReceipt.setText(bundle.getString("GOODS_RECEIPT_TITLE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 15);
        jPanel4.add(btnGoodsReceipt, gridBagConstraints);

        btnGoodsMove.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnGoodsMove.setText(bundle.getString("GOODS_MOVE_TITLE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 15);
        jPanel4.add(btnGoodsMove, gridBagConstraints);

        btnGoodsExport.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnGoodsExport.setText(bundle.getString("GOODS_EXPORT_TITLE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 15);
        jPanel4.add(btnGoodsExport, gridBagConstraints);

        btnShowStorage.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnShowStorage.setText(bundle.getString("VIEW_STORAGE_TITLE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 15);
        jPanel4.add(btnShowStorage, gridBagConstraints);

        pLogin.add(jPanel4, java.awt.BorderLayout.LINE_START);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        lbName.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbName.setText(bundle.getString("NAME_LB") + ":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel5.add(lbName, gridBagConstraints);

        btnLogout.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnLogout.setText(bundle.getString("LOGOUT_BTN"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel5.add(btnLogout, gridBagConstraints);

        btnChangePassword.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnChangePassword.setText(bundle.getString("CHANGE_PASSWORD_BTN"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel5.add(btnChangePassword, gridBagConstraints);

        lbUsername.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbUsername.setText(bundle.getString("USER_USERNAME") + ":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel5.add(lbUsername, gridBagConstraints);

        pLogin.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel3.add(pLogin, "card3");

        pGoodsMove.setPreferredSize(new java.awt.Dimension(1400, 1000));
        pGoodsMove.setLayout(new java.awt.BorderLayout());

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setPreferredSize(new java.awt.Dimension(500, 600));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        jScrollPane2.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jScrollPane2.setPreferredSize(new java.awt.Dimension(200, 400));

        tbFreeStorage1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbFreeStorage1.getTableHeader().setFont(new java.awt.Font("Arial", 1, 15));
        tbFreeStorage1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                bundle.getString("FREE_STORAGE_TB")
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tbFreeStorage1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.ipady = 200;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 50, 50);
        jPanel6.add(jScrollPane2, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 25)); // NOI18N
        jLabel4.setText(bundle.getString("FREE_STORAGE_LB"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel6.add(jLabel4, gridBagConstraints);

        pGoodsMove.add(jPanel6, java.awt.BorderLayout.LINE_START);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setPreferredSize(new java.awt.Dimension(956, 600));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        jLabel5.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel5.setText(bundle.getString("QUANTITY") + ":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(50, 50, 50, 0);
        jPanel7.add(jLabel5, gridBagConstraints);

        tfQuantity1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.insets = new java.awt.Insets(50, 100, 50, 100);
        jPanel7.add(tfQuantity1, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel6.setText(bundle.getString("NEW_STORAGE_CODE") + ":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(50, 50, 50, 0);
        jPanel7.add(jLabel6, gridBagConstraints);

        tfStorageCode1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.insets = new java.awt.Insets(50, 100, 50, 100);
        jPanel7.add(tfStorageCode1, gridBagConstraints);

        btnMoveGoods.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnMoveGoods.setText(bundle.getString("MOVE_GOODS_BTN"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(50, 0, 50, 0);
        jPanel7.add(btnMoveGoods, gridBagConstraints);

        chbStorageStatus1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        chbStorageStatus1.setText(bundle.getString("SET_STORAGE_FULL"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel7.add(chbStorageStatus1, gridBagConstraints);

        tbGoods.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbGoods.getTableHeader().setFont(new java.awt.Font("Arial", 1, 15));
        tbGoods.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                bundle.getString("ID"), bundle.getString("GOODS_CODE"), bundle.getString("GOODS_NAME"), bundle.getString("QUANTITY"), bundle.getString("POSITION")
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbGoods.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(tbGoods);
        if (tbGoods.getColumnModel().getColumnCount() > 0) {
            tbGoods.getColumnModel().getColumn(0).setMinWidth(0);
            tbGoods.getColumnModel().getColumn(0).setPreferredWidth(0);
            tbGoods.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 400;
        gridBagConstraints.ipady = 250;
        gridBagConstraints.insets = new java.awt.Insets(50, 50, 50, 50);
        jPanel7.add(jScrollPane3, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 25)); // NOI18N
        jLabel7.setText(bundle.getString("CHOOSE_GOODS_MOVE_LB"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel7.add(jLabel7, gridBagConstraints);

        lbChoosedItem.setFont(new java.awt.Font("Arial", 0, 20)); // NOI18N
        lbChoosedItem.setText(bundle.getString("CHOOSED_GOODS") + ":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel7.add(lbChoosedItem, gridBagConstraints);

        pGoodsMove.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));

        jLabel14.setFont(new java.awt.Font("Arial", 0, 35)); // NOI18N
        jLabel14.setText(bundle.getString("GOODS_MOVE_TITLE"));
        jPanel11.add(jLabel14);

        pGoodsMove.add(jPanel11, java.awt.BorderLayout.PAGE_START);

        spGoodsMove.setViewportView(pGoodsMove);

        jPanel3.add(spGoodsMove, "card5");

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setLayout(new java.awt.GridBagLayout());

        jScrollPane5.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jScrollPane5.setPreferredSize(new java.awt.Dimension(600, 400));

        tbGoods1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbGoods1.getTableHeader().setFont(new java.awt.Font("Arial", 1, 15));
        tbGoods1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                bundle.getString("ID"), bundle.getString("GOODS_CODE"), bundle.getString("GOODS_NAME"), bundle.getString("QUANTITY"), bundle.getString("POSITION")
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbGoods1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane5.setViewportView(tbGoods1);
        if (tbGoods1.getColumnModel().getColumnCount() > 0) {
            tbGoods1.getColumnModel().getColumn(0).setMinWidth(0);
            tbGoods1.getColumnModel().getColumn(0).setPreferredWidth(0);
            tbGoods1.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 400;
        gridBagConstraints.ipady = 100;
        gridBagConstraints.insets = new java.awt.Insets(10, 50, 25, 50);
        jPanel8.add(jScrollPane5, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 25)); // NOI18N
        jLabel9.setText(bundle.getString("CHOOSE_GOODS_EXPORT_LB"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel8.add(jLabel9, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel10.setText(bundle.getString("QUANTITY") + ":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 150, 25, 25);
        jPanel8.add(jLabel10, gridBagConstraints);

        btnExportGoods.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnExportGoods.setText(bundle.getString("EXPORT_GOODS_BNT"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel8.add(btnExportGoods, gridBagConstraints);

        lbChoosedItem1.setFont(new java.awt.Font("Arial", 0, 20)); // NOI18N
        lbChoosedItem1.setText(bundle.getString("CHOOSED_GOODS") + ":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel8.add(lbChoosedItem1, gridBagConstraints);

        tfQuantity2.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.insets = new java.awt.Insets(25, 50, 25, 25);
        jPanel8.add(tfQuantity2, gridBagConstraints);

        jLabel15.setFont(new java.awt.Font("Arial", 0, 35)); // NOI18N
        jLabel15.setText(bundle.getString("GOODS_EXPORT_TITLE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel8.add(jLabel15, gridBagConstraints);

        spGoodsExport.setViewportView(jPanel8);

        jPanel3.add(spGoodsExport, "card5");

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setLayout(new java.awt.GridBagLayout());

        jLabel11.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel11.setText(bundle.getString("SEARCH_OPTION"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 300);
        jPanel9.add(jLabel11, gridBagConstraints);

        cbStorageOption.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        cbStorageOption.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { bundle.getString("CHOOSE"), bundle.getString("GOODS"), bundle.getString("STORAGE") }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.insets = new java.awt.Insets(25, 300, 25, 25);
        jPanel9.add(cbStorageOption, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel12.setText(bundle.getString("CODE") + ":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 150, 25, 25);
        jPanel9.add(jLabel12, gridBagConstraints);

        tfCodeFilter.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tfCodeFilter.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 0, 25, 25);
        jPanel9.add(tfCodeFilter, gridBagConstraints);

        btnSearch.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnSearch.setText(bundle.getString("SEARCH"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 150);
        jPanel9.add(btnSearch, gridBagConstraints);

        jScrollPane6.setPreferredSize(new java.awt.Dimension(1000, 600));

        tbStoragePositions.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbStoragePositions.getTableHeader().setFont(new java.awt.Font("Arial", 1, 15));
        tbStoragePositions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                bundle.getString("POSITION_CODE"), bundle.getString("BUILDING"), bundle.getString("STORAGE_SHELF"), bundle.getString("GOODS_CODE"), bundle.getString("GOODS_NAME"), bundle.getString("QUANTITY"), bundle.getString("RECEIPT_DATE")
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tbStoragePositions);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel9.add(jScrollPane6, gridBagConstraints);

        jLabel16.setFont(new java.awt.Font("Arial", 0, 35)); // NOI18N
        jLabel16.setText(bundle.getString("SOTRAGE_INFO_ITEMS"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel9.add(jLabel16, gridBagConstraints);

        spGoodsInfo.setViewportView(jPanel9);

        jPanel3.add(spGoodsInfo, "card6");

        getContentPane().add(jPanel3);

        jMenu3.setText(bundle.getString("ACCOUNT_MENU"));
        jMenu3.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N

        miLoginPage.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miLoginPage.setText(bundle.getString("VIEW_HOMEPAGE_MENU"));
        jMenu3.add(miLoginPage);

        miChangePassword.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miChangePassword.setText(bundle.getString("CHANGE_PASSWORD_BTN"));
        jMenu3.add(miChangePassword);

        miLogout.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miLogout.setText(bundle.getString("LOGOUT_BTN"));
        jMenu3.add(miLogout);
        jMenu3.add(jSeparator2);

        miExit.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miExit.setText(bundle.getString("EXIT_MENU"));
        jMenu3.add(miExit);

        jMenuBar1.add(jMenu3);

        jMenu1.setText(bundle.getString("EDIT_MENU"));
        jMenu1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N

        miGoodsReceipt.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miGoodsReceipt.setText(bundle.getString("GOODS_RECEIPT_TITLE"));
        jMenu1.add(miGoodsReceipt);

        miGoodsMove.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miGoodsMove.setText(bundle.getString("GOODS_MOVE_TITLE"));
        jMenu1.add(miGoodsMove);

        miGoodsExport.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miGoodsExport.setText(bundle.getString("GOODS_EXPORT_TITLE"));
        jMenu1.add(miGoodsExport);

        jMenuBar1.add(jMenu1);

        jMenu2.setText(bundle.getString("VIEW_MENU"));
        jMenu2.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N

        miShowStorage.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miShowStorage.setText(bundle.getString("VIEW_STORAGE_TITLE"));
        jMenu2.add(miShowStorage);

        jMenuBar1.add(jMenu2);

        jMenu4.setText(bundle.getString("ABOUT_MENU"));
        jMenu4.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N

        miAbout.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miAbout.setText(bundle.getString("ABOUT"));
        jMenu4.add(miAbout);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAcceptGoods;
    private javax.swing.JButton btnChangePassword;
    private javax.swing.JButton btnExportGoods;
    private javax.swing.JButton btnGoodsExport;
    private javax.swing.JButton btnGoodsMove;
    private javax.swing.JButton btnGoodsReceipt;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnMoveGoods;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnShowStorage;
    private javax.swing.JComboBox<String> cbStorageOption;
    private javax.swing.JCheckBox cbStorageStatus;
    private javax.swing.JCheckBox chbStorageStatus1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JLabel lbChoosedItem;
    private javax.swing.JLabel lbChoosedItem1;
    private javax.swing.JLabel lbName;
    private javax.swing.JLabel lbUsername;
    private javax.swing.JMenuItem miAbout;
    private javax.swing.JMenuItem miChangePassword;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miGoodsExport;
    private javax.swing.JMenuItem miGoodsMove;
    private javax.swing.JMenuItem miGoodsReceipt;
    private javax.swing.JMenuItem miLoginPage;
    private javax.swing.JMenuItem miLogout;
    private javax.swing.JMenuItem miShowStorage;
    private javax.swing.JPanel pGoodsMove;
    private javax.swing.JPanel pGoodsReceipt;
    private javax.swing.JPanel pLogin;
    private javax.swing.JScrollPane spGoodsExport;
    private javax.swing.JScrollPane spGoodsInfo;
    private javax.swing.JScrollPane spGoodsMove;
    private javax.swing.JTable tbFreeStorage;
    private javax.swing.JTable tbFreeStorage1;
    private javax.swing.JTable tbGoods;
    private javax.swing.JTable tbGoods1;
    private javax.swing.JTable tbStoragePositions;
    private javax.swing.JTextField tfCodeFilter;
    private javax.swing.JTextField tfGoodsCode;
    private javax.swing.JTextField tfQuantity;
    private javax.swing.JTextField tfQuantity1;
    private javax.swing.JTextField tfQuantity2;
    private javax.swing.JTextField tfStorageCode;
    private javax.swing.JTextField tfStorageCode1;
    // End of variables declaration//GEN-END:variables

    /**
     * Metóda pre získanie check boxu pre informáciu, či skladovací priestor je
     * obsadený.
     * 
     * @return check box s informáciou o obsadenosti skladovacieho preistoru
     */
    public JCheckBox getCbStorageStatus() {
        return cbStorageStatus;
    }

    /**
     * Metóda pre získanie tabuľky voľných pozícií v sklade.
     * 
     * @return tabuľka voľných pozícii v sklade
     */
    public JTable getTbFreeStorageTable() {
        return tbFreeStorage;
    }

    /**
     * Metóda pre získanie modelu tabuľky voľných pozícií v sklade.
     * 
     * @return model tabuľky voľných pozícii v sklade
     */
    public DefaultTableModel getTbFreeStorageModel() {
        return (DefaultTableModel) tbFreeStorage.getModel();
    }

    /**
     * Metóda pre získanie kódu tovaru.
     * 
     * @return text z textového poľa 
     */
    public String getTfGoodsCode() {
        return tfGoodsCode.getText().trim();
    }

    /**
     * Metóda pre získanie množstva z textového poľa.
     * 
     * @return 0 v prípade prázdneho textového poľa, -1 v prípade chyby, inak
     * zadané množstvo
     */
    public int getTfQuantity() {
        try {
            if (tfQuantity.getText().equals("")) {
                return 0;
            }
            return Integer.parseInt(tfQuantity.getText());
        } catch (NumberFormatException e) {
            CustomLogger.getLogger(WarehousemanWindow.class).warn( bundle.getString("QUANTITY_ERROR1"),e);
            return -1;
        }
    }

    /**
     * Metóda pre získanie kódu skladovacieho priestoru.
     * 
     * @return text z textového poľa 
     */
    public String getTfStorageCode() {
        return tfStorageCode.getText().trim();
    }

    /**
     * Metóda pre zíksanie panelu príjmu tovaru.
     * 
     * @return panel pre príjem tovaru
     */
    public JPanel getpGoodsReceipt() {
        return pGoodsReceipt;
    }

    /**
     * Metóda pre pridanie Mouselistenera pre tlačidlo a Actionlistenera pre
     * menu item.
     * 
     * @param iMethod listener pre stlačenia tlačidla a menu item
     */
    public void changePasswordListener(IMethod iMethod) {
        btnChangePassword.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                iMethod.method();
            }
        });
        miChangePassword.addActionListener(e -> iMethod.method());
    }

    /**
     * Metóda pre pridanie Mouselistenera pre tlačidlo a Actionlistenera pre
     * menu item.
     * 
     * @param iMethod listener pre stlačenia tlačidla a menu item
     */
    public void goodsExportListener(IMethod iMethod) {
        btnGoodsExport.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                iMethod.method();
            }
        });
        miGoodsExport.addActionListener(e -> iMethod.method());
    }

    /**
     * Metóda pre pridanie Mouselistenera pre tlačidlo a Actionlistenera pre
     * menu item.
     * 
     * @param iMethod listener pre stlačenia tlačidla a menu item
     */
    public void goodsMoveListener(IMethod iMethod) {
        btnGoodsMove.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                iMethod.method();
            }
        });
        miGoodsMove.addActionListener(e -> iMethod.method());
    }

    /**
     * Metóda pre pridanie Mouselistenera pre tlačidlo a Actionlistenera pre
     * menu item.
     * 
     * @param iMethod listener pre stlačenia tlačidla a menu item
     */
    public void goodsReceiptListener(IMethod iMethod) {
        btnGoodsReceipt.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                iMethod.method();
            }
        });
        miGoodsReceipt.addActionListener(e -> iMethod.method());
    }

    /**
     * Metóda pre pridanie Mouselistenera pre tlačidlo a Actionlistenera pre
     * menu item.
     * 
     * @param iMethod listener pre stlačenia tlačidla a menu item
     */
    public void logoutListener(IMethod iMethod) {
        btnLogout.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                iMethod.method();
            }
        });
        miLogout.addActionListener(e -> iMethod.method());
    }
    
    /**
     * Metóda pre pridanie Mouselistenera pre tlačidlo a Actionlistenera pre
     * menu item.
     * 
     * @param iMethod listener pre stlačenia tlačidla a menu item
     */
    public void showStorageListener(IMethod iMethod) {
        btnShowStorage.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                iMethod.method();
            }
        });
        miShowStorage.addActionListener(e -> iMethod.method());
    }

    /**
     * Metóda pre pridanie Actionlistenera pre menu item.
     * 
     * @param listener listener pre stlačenia menu item-u
     */
    public void aboutListener(ActionListener listener) {
        miAbout.addActionListener(listener);
    }

    /**
     * Metóda pre pridanie Actionlistenera pre menu item.
     * 
     * @param listener listener pre stlačenia menu item-u
     */
    public void exitListener(ActionListener listener) {
        miExit.addActionListener(listener);
    }

    /**
     * Metóda pre pridanie Actionlistenera pre menu item.
     * 
     * @param listener listener pre stlačenia menu item-u
     */
    public void loginListener(ActionListener listener) {
        miLoginPage.addActionListener(listener);
    }

    /**
     * Metóda pre pridanie Mouselistenera pre tlačidlo.
     * 
     * @param adapter listener pre stlačenia tlačidla
     */
    public void btnAcceptGoodsAddListener(MouseAdapter adapter) {
        btnAcceptGoods.addMouseListener(adapter);
    }

    /**
     * Metóda pre zíksanie panelu domovskej stránky.
     * 
     * @return panel s domovskou stránkou
     */
    public JPanel getpLogin() {
        return pLogin;
    }

    /**
     * Metóda pre nastavenie textu pre label.
     * 
     * @param text text pre label
     */
    public void setLbName(String text) {
        this.lbName.setText(text);
    }

    /**
     * Metóda pre nastavenie textu pre label.
     * 
     * @param text text pre label
     */
    public void setLbUsername(String text) {
        this.lbUsername.setText(text);
    }

    /**
     * Metóda pre nastavenie hodnoty v textovom poli.
     * 
     * @param text hodnota pre textové pole
     */
    public void setTfGoodsCode(String text) {
        this.tfGoodsCode.setText(text);
    }

    /**
     * Metóda pre nastavenie hodnoty v textovom poli.
     * 
     * @param text hodnota pre textové pole
     */
    public void setTfQuantity(String text) {
        this.tfQuantity.setText(text);
    }

    /**
     * Metóda pre nastavenie hodnoty v textovom poli.
     * 
     * @param text hodnota pre textové pole
     */
    public void setTfStorageCode(String text) {
        this.tfStorageCode.setText(text);
    }

    /**
     * Metóda pre pridanie Mouselistenera pre tlačidlo.
     * 
     * @param adapter listener pre stlačenia tlačidla
     */
    public void btnMoveGoodsAddListener(MouseAdapter adapter) {
        btnMoveGoods.addMouseListener(adapter);
    }

    /**
     * Metóda pre získanie modelu tabuľky voľných pozícií v sklade.
     * 
     * @return model tabuľky voľných pozícii v sklade
     */
    public JTable getTbFreeStorage1Table() {
        return tbFreeStorage1;
    }
    
    /**
     * Metóda pre získanie tabuľky voľných pozícií v sklade.
     * 
     * @return tabuľka voľných pozícii v sklade
     */
     public DefaultTableModel getTbFreeStorage1Model() {
        return (DefaultTableModel) tbFreeStorage1.getModel();
    }

    /**
     * Metóda pre získanie tabuľky tovarov v sklade.
     * 
     * @return tabuľka tovarov v sklade
     */
    public JTable getTbGoodsTable() {
        return tbGoods;
    }
    
    /**
     * Metóda pre získanie modelu tabuľky voľných pozícií v sklade.
     * 
     * @return model tabuľky voľných pozícii v sklade
     */
    public DefaultTableModel getTbGoodsModel() {
        return (DefaultTableModel) tbGoods.getModel();
    }

    /**
     * Metóda pre získanie množstva z textového poľa.
     * 
     * @return 0 v prípade prázdneho textového poľa, -1 v prípade chyby, inak
     * zadané množstvo
     */
    public int getTfQuantity1() {
        try {
            if (tfQuantity1.getText().equals("")) {
                return 0;
            }
            return Integer.parseInt(tfQuantity1.getText());
        } catch (NumberFormatException e) {
            CustomLogger.getLogger(WarehousemanWindow.class).warn( bundle.getString("QUANTITY_ERROR1"),e);
            return -1;
        }
    }

    /**
     * Metóda pre získanie kódu skladovacieho priestoru.
     * 
     * @return text z textového poľa 
     */
    public String getTfStorageCode1() {
        return tfStorageCode1.getText().trim();
    }

    /**
     * Metóda pre získanie scroll panelu okna presun tovaru v sklade.
     * 
     * @return scroll panel pre presun tovaru v sklade
     */
    public JScrollPane getSpGoodsMove() {
        return spGoodsMove;
    }

    /**
     * Metóda pre nastavenie hodnoty v textovom poli.
     * 
     * @param text hodnota pre textové pole
     */
    public void setTfQuantity1(String text) {
        this.tfQuantity1.setText(text);
    }

    /**
     * Metóda pre nastavenie hodnoty v textovom poli.
     * 
     * @param text hodnota pre textové pole
     */
    public void setTfStorageCode1(String text) {
        this.tfStorageCode1.setText(text);
    }

    /**
     * Metóda pre nastavenie textu pre label.
     * 
     * @param text dodatočný text pre label
     */
    public void setLbChoosedItem(String text) {
        this.lbChoosedItem.setText(bundle.getString("CHOOSED_GOODS") +": " + text);
    }

    /**
     * Metóda pre pridanie Mouselistenera pre tlačidlo.
     * 
     * @param adapter listener pre stlačenia tlačidla
     */
    public void btnExportGoodsAddListener(MouseAdapter adapter) {
        btnExportGoods.addMouseListener(adapter);
    }

    /**
     * Metóda pre získanie check boxu pre informáciu, či skladovací priestor je
     * obsadený.
     * 
     * @return check box s informáciou o obsadenosti skladovacieho preistoru
     */
    public JCheckBox getChbStorageStatus1() {
        return chbStorageStatus1;
    }

    /**
     * Metóda pre nastavenie textu pre label.
     * 
     * @param text dodatočný text pre label
     */
    public void setLbChoosedItem1(String text) {
        lbChoosedItem1.setText(bundle.getString("CHOOSED_GOODS") + ": " + text);
    }

    /**
     * Metóda pre získanie tabuľky tovarov v sklade.
     * 
     * @return tabuľka tovarov v sklade
     */
    public JTable getTbGoods1Table() {
        return tbGoods1;
    }
    
    /**
     * Metóda pre získanie modelu tabuľky tovarov v sklade.
     * 
     * @return model tabuľky tovarov v sklade
     */
    public DefaultTableModel getTbGoods1Model() {
        return (DefaultTableModel) tbGoods1.getModel();
    }

    /**
     * Metóda pre získanie množstva z textového poľa.
     * 
     * @return 0 v prípade prázdneho textového poľa, -1 v prípade chyby, inak
     * zadané množstvo
     */
    public int getTfQuantity2() {
        try {
            if (tfQuantity2.getText().equals("")) {
                return 0;
            }
            return Integer.parseInt(tfQuantity2.getText());
        } catch (NumberFormatException e) {
            CustomLogger.getLogger(WarehousemanWindow.class).warn( bundle.getString("QUANTITY_ERROR1"),e);
            return -1;
        }
    }
    
    /**
     * Metóda pre nastavenie hodnoty v textovom poli.
     * 
     * @param text hodnota pre textové pole
     */
    public void setTfQuantity2(String text) {
        tfQuantity2.setText(text);
    }

    /**
     * Metóda pre získanie scroll panelu okna vývoz tovaru.
     * 
     * @return scroll panel pre vývoz tovaru
     */
    public JScrollPane getSpGoodsExport() {
        return spGoodsExport;
    }
    
    /**
     * Metóda pre pridanie Mouselistenera pre tlačidlo.
     * 
     * @param adapter listener pre stlačenia tlačidla
     */
    public void btnSearchAddListener(MouseAdapter adapter) {
        btnSearch.addMouseListener(adapter);
    }

    /**
     * Metóda pre získanie výberového pola pre možnost
     * @return 
     */
    public JComboBox<String> getCbStorageOption() {
        return cbStorageOption;
    }

    /**
     * Metóda pre získanie scroll panelu okna pre informácie o tovaroch.
     * 
     * @return scroll panel pre informácie o tovaroch
     */
    public JScrollPane getSpGoodsInfo() {
        return spGoodsInfo;
    }

    /**
     * Metóda pre získanie modelu tabuľky skladovacích pozícií.
     * 
     * @return model tabuľky skladovacích pozícií
     */
    public DefaultTableModel getTbStoragePositionsModel() {
        return (DefaultTableModel) tbStoragePositions.getModel();
    }

    /**
     * Metóda pre získanie hodnoty z filtra.
     * 
     * @return text z textového poľa 
     */
    public String getTfCodeFilter() {
        return tfCodeFilter.getText().trim();
    }
    
    /**
     * Metóda pre nastavenie hodnoty v textovom poli.
     * 
     * @param text hodnota pre textové pole
     */
    public void setTfCodeFilter(String text) {
        tfCodeFilter.setText(text);
    }
    
    /**
     * Metóda pre odstránenie Mouselistenerov z tlačidiel a tabuliek z 
     * jednotlivých panelov.
     */
    public void removeListeners() {
        //Login panel ??
        for (MouseListener ml : btnLogout.getMouseListeners()) {
            btnLogout.removeMouseListener(ml);
        }
        for (MouseListener ml : btnChangePassword.getMouseListeners()) {
            btnChangePassword.removeMouseListener(ml);
        }
        
        //GoodsReceipt panel
        for (MouseListener ml : btnAcceptGoods.getMouseListeners()) {
            btnAcceptGoods.removeMouseListener(ml);
        }
        for (MouseListener ml : tbFreeStorage.getMouseListeners()) {
            tbFreeStorage.removeMouseListener(ml);
        }
        
        //GoodsMove panel
        for (MouseListener ml : btnMoveGoods.getMouseListeners()) {
            btnMoveGoods.removeMouseListener(ml);
        }
        for (MouseListener ml : tbFreeStorage1.getMouseListeners()) {
            tbFreeStorage1.removeMouseListener(ml);
        }
        for (MouseListener ml : tbGoods.getMouseListeners()) {
            tbGoods.removeMouseListener(ml);
        }
        
        //GoodsExport panel
        for (MouseListener ml : btnExportGoods.getMouseListeners()) {
            btnExportGoods.removeMouseListener(ml);
        }
        for (MouseListener ml : tbGoods1.getMouseListeners()) {
            tbGoods1.removeMouseListener(ml);
        }
        
        //GoodsInfo panel
        for (MouseListener ml : btnSearch.getMouseListeners()) {
            btnSearch.removeMouseListener(ml);
        }
    }

}
