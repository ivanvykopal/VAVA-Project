/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sk.stu.fiit.GUI;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import sk.stu.fiit.Controllers.IMethod;

/**
 *
 * @author Acer
 */
public class WarehousemanWindow extends javax.swing.JFrame {

    /**
     * Creates new form GoodsReceiptWindow
     */
    public WarehousemanWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel3 = new javax.swing.JPanel();
        pGoodsReceipt = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbFreeStorage = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tfGoodsCode = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfQuantity = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tfStorageCode = new javax.swing.JTextField();
        btnAcceptGoods = new javax.swing.JButton();
        chbStorageStatus = new javax.swing.JCheckBox();
        pLogin = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        btnGoodsReceipt = new javax.swing.JButton();
        btnGoodsMove = new javax.swing.JButton();
        btnGoodsExport = new javax.swing.JButton();
        btnShowStorage = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        lbName = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        btnChangePassword = new javax.swing.JButton();
        lbUsername = new javax.swing.JLabel();
        spGoodsMove = new javax.swing.JScrollPane();
        pGoodsMove = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbFreeStorage1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        tfQuantity1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tfStorageCode1 = new javax.swing.JTextField();
        btnMoveGoods = new javax.swing.JButton();
        chbStorageStatus1 = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbGoods = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        lbChoosedItem = new javax.swing.JLabel();
        spGoodsExport = new javax.swing.JScrollPane();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbGoods1 = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnExportGoods = new javax.swing.JButton();
        lbChoosedItem1 = new javax.swing.JLabel();
        tfQuantity2 = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        miChangePassword = new javax.swing.JMenuItem();
        miLogout = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        miGoodsReceipt = new javax.swing.JMenuItem();
        miGoodsMove = new javax.swing.JMenuItem();
        miGoodsExport = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        miShowStorage = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Príjem tovaru");

        jPanel3.setLayout(new java.awt.CardLayout());

        pGoodsReceipt.setLayout(new java.awt.BorderLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 400));

        tbFreeStorage.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbFreeStorage.getTableHeader().setFont(new java.awt.Font("Arial", 1, 15));
        tbFreeStorage.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Voľné skladovacie priestory"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbFreeStorage);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.ipady = 400;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 50, 50);
        jPanel2.add(jScrollPane1, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Arial", 0, 25)); // NOI18N
        jLabel8.setText("Voľné pozície v sklade");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel2.add(jLabel8, gridBagConstraints);

        pGoodsReceipt.add(jPanel2, java.awt.BorderLayout.LINE_START);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel1.setText("Kód tovaru:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(50, 50, 50, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        tfGoodsCode.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.insets = new java.awt.Insets(50, 100, 50, 100);
        jPanel1.add(tfGoodsCode, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel2.setText("Množstvo:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(50, 50, 50, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        tfQuantity.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.insets = new java.awt.Insets(50, 100, 50, 100);
        jPanel1.add(tfQuantity, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel3.setText("Kód skladovacieho priestoru:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(50, 50, 50, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        tfStorageCode.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.insets = new java.awt.Insets(50, 100, 50, 100);
        jPanel1.add(tfStorageCode, gridBagConstraints);

        btnAcceptGoods.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnAcceptGoods.setText("Vykonať príjem tovaru");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(50, 0, 50, 0);
        jPanel1.add(btnAcceptGoods, gridBagConstraints);

        chbStorageStatus.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        chbStorageStatus.setText("Nastaviť skladovací priestor ako obsadený");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel1.add(chbStorageStatus, gridBagConstraints);

        pGoodsReceipt.add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel3.add(pGoodsReceipt, "card2");

        pLogin.setBackground(new java.awt.Color(255, 255, 255));
        pLogin.setLayout(new java.awt.BorderLayout());

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        btnGoodsReceipt.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnGoodsReceipt.setText("Príjem tovaru");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 15);
        jPanel4.add(btnGoodsReceipt, gridBagConstraints);

        btnGoodsMove.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnGoodsMove.setText("Presun tovaru");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 15);
        jPanel4.add(btnGoodsMove, gridBagConstraints);

        btnGoodsExport.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnGoodsExport.setText("Vývoz tovaru");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 15);
        jPanel4.add(btnGoodsExport, gridBagConstraints);

        btnShowStorage.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnShowStorage.setText("Zobrazenie skladu");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 15);
        jPanel4.add(btnShowStorage, gridBagConstraints);

        pLogin.add(jPanel4, java.awt.BorderLayout.LINE_START);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        lbName.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbName.setText("Meno:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel5.add(lbName, gridBagConstraints);

        btnLogout.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnLogout.setText("Odhlásiť sa");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel5.add(btnLogout, gridBagConstraints);

        btnChangePassword.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnChangePassword.setText("Zmeniť heslo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel5.add(btnChangePassword, gridBagConstraints);

        lbUsername.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbUsername.setText("Prihlasovacie meno:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel5.add(lbUsername, gridBagConstraints);

        pLogin.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel3.add(pLogin, "card3");

        pGoodsMove.setLayout(new java.awt.BorderLayout());

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        jScrollPane2.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jScrollPane2.setPreferredSize(new java.awt.Dimension(200, 400));

        tbFreeStorage1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbFreeStorage1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Voľné skladovacie priestory"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tbFreeStorage1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.ipady = 400;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 50, 50);
        jPanel6.add(jScrollPane2, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 25)); // NOI18N
        jLabel4.setText("Voľné pozície v sklade");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel6.add(jLabel4, gridBagConstraints);

        pGoodsMove.add(jPanel6, java.awt.BorderLayout.LINE_START);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        jLabel5.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel5.setText("Množstvo:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(50, 50, 50, 0);
        jPanel7.add(jLabel5, gridBagConstraints);

        tfQuantity1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.insets = new java.awt.Insets(50, 100, 50, 100);
        jPanel7.add(tfQuantity1, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel6.setText("Kód novej pozície:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(50, 50, 50, 0);
        jPanel7.add(jLabel6, gridBagConstraints);

        tfStorageCode1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.insets = new java.awt.Insets(50, 100, 50, 100);
        jPanel7.add(tfStorageCode1, gridBagConstraints);

        btnMoveGoods.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnMoveGoods.setText("Presunúť tovar");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(50, 0, 50, 0);
        jPanel7.add(btnMoveGoods, gridBagConstraints);

        chbStorageStatus1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        chbStorageStatus1.setText("Nastaviť novú pozíciu ako obsadenú");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel7.add(chbStorageStatus1, gridBagConstraints);

        tbGoods.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbGoods.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Kód tovaru", "Názov", "Množstvo", "Pozícia"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbGoods.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(tbGoods);
        if (tbGoods.getColumnModel().getColumnCount() > 0) {
            tbGoods.getColumnModel().getColumn(0).setMinWidth(0);
            tbGoods.getColumnModel().getColumn(0).setPreferredWidth(0);
            tbGoods.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 400;
        gridBagConstraints.ipady = 250;
        gridBagConstraints.insets = new java.awt.Insets(50, 50, 50, 50);
        jPanel7.add(jScrollPane3, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 25)); // NOI18N
        jLabel7.setText("Výber tovaru na presun");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel7.add(jLabel7, gridBagConstraints);

        lbChoosedItem.setFont(new java.awt.Font("Arial", 0, 20)); // NOI18N
        lbChoosedItem.setText("Vybraný tovar:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel7.add(lbChoosedItem, gridBagConstraints);

        pGoodsMove.add(jPanel7, java.awt.BorderLayout.CENTER);

        spGoodsMove.setViewportView(pGoodsMove);

        jPanel3.add(spGoodsMove, "card5");

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setLayout(new java.awt.GridBagLayout());

        jScrollPane5.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jScrollPane5.setPreferredSize(new java.awt.Dimension(600, 400));

        tbGoods1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbGoods1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kód tovaru", "Názov", "Množstvo", "Pozícia"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbGoods1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane5.setViewportView(tbGoods1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 400;
        gridBagConstraints.ipady = 200;
        gridBagConstraints.insets = new java.awt.Insets(50, 50, 25, 50);
        jPanel8.add(jScrollPane5, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 25)); // NOI18N
        jLabel9.setText("Výber tovaru pre vývoz");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel8.add(jLabel9, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel10.setText("Množstvo:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 150, 25, 25);
        jPanel8.add(jLabel10, gridBagConstraints);

        btnExportGoods.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnExportGoods.setText("Vyviesť tovar");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel8.add(btnExportGoods, gridBagConstraints);

        lbChoosedItem1.setFont(new java.awt.Font("Arial", 0, 20)); // NOI18N
        lbChoosedItem1.setText("Vybraný tovar:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel8.add(lbChoosedItem1, gridBagConstraints);

        tfQuantity2.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.insets = new java.awt.Insets(25, 50, 25, 25);
        jPanel8.add(tfQuantity2, gridBagConstraints);

        spGoodsExport.setViewportView(jPanel8);

        jPanel3.add(spGoodsExport, "card5");

        getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jMenu3.setText("Správa účtu");
        jMenu3.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N

        miChangePassword.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miChangePassword.setText("Zmena hesla");
        jMenu3.add(miChangePassword);

        miLogout.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miLogout.setText("Odhlásiť sa");
        jMenu3.add(miLogout);

        jMenuBar1.add(jMenu3);

        jMenu1.setText("Úprava");
        jMenu1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N

        miGoodsReceipt.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miGoodsReceipt.setText("Príjem tovaru");
        jMenu1.add(miGoodsReceipt);

        miGoodsMove.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miGoodsMove.setText("Presun tovaru");
        jMenu1.add(miGoodsMove);

        miGoodsExport.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miGoodsExport.setText("Vývoz tovaru");
        jMenu1.add(miGoodsExport);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Zobrazenie");
        jMenu2.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N

        miShowStorage.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miShowStorage.setText("Zobrazenie skladu");
        jMenu2.add(miShowStorage);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAcceptGoods;
    private javax.swing.JButton btnChangePassword;
    private javax.swing.JButton btnExportGoods;
    private javax.swing.JButton btnGoodsExport;
    private javax.swing.JButton btnGoodsMove;
    private javax.swing.JButton btnGoodsReceipt;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnMoveGoods;
    private javax.swing.JButton btnShowStorage;
    private javax.swing.JCheckBox chbStorageStatus;
    private javax.swing.JCheckBox chbStorageStatus1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lbChoosedItem;
    private javax.swing.JLabel lbChoosedItem1;
    private javax.swing.JLabel lbName;
    private javax.swing.JLabel lbUsername;
    private javax.swing.JMenuItem miChangePassword;
    private javax.swing.JMenuItem miGoodsExport;
    private javax.swing.JMenuItem miGoodsMove;
    private javax.swing.JMenuItem miGoodsReceipt;
    private javax.swing.JMenuItem miLogout;
    private javax.swing.JMenuItem miShowStorage;
    private javax.swing.JPanel pGoodsMove;
    private javax.swing.JPanel pGoodsReceipt;
    private javax.swing.JPanel pLogin;
    private javax.swing.JScrollPane spGoodsExport;
    private javax.swing.JScrollPane spGoodsMove;
    private javax.swing.JTable tbFreeStorage;
    private javax.swing.JTable tbFreeStorage1;
    private javax.swing.JTable tbGoods;
    private javax.swing.JTable tbGoods1;
    private javax.swing.JTextField tfGoodsCode;
    private javax.swing.JTextField tfQuantity;
    private javax.swing.JTextField tfQuantity1;
    private javax.swing.JTextField tfQuantity2;
    private javax.swing.JTextField tfStorageCode;
    private javax.swing.JTextField tfStorageCode1;
    // End of variables declaration//GEN-END:variables

    public JCheckBox getChbStorageStatus() {
        return chbStorageStatus;
    }

    public JTable getTbFreeStorageTable() {
        return tbFreeStorage;
    }

    public DefaultTableModel getTbFreeStorageModel() {
        return (DefaultTableModel) tbFreeStorage.getModel();
    }

    public String getTfGoodsCode() {
        return tfGoodsCode.getText().trim();
    }

    public int getTfQuantity() {
        try {
            if (tfQuantity.getText().equals("")) {
                return 0;
            }
            return Integer.parseInt(tfQuantity.getText());
        } catch (NumberFormatException e) {
            return -1;
        }
    }

    public String getTfStorageCode() {
        return tfStorageCode.getText().trim();
    }

    public JPanel getpGoodsReceipt() {
        return pGoodsReceipt;
    }

    public void changePasswordListener(IMethod iMethod) {
        btnChangePassword.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                iMethod.method();
            }
        });
        miChangePassword.addActionListener(e -> iMethod.method());
    }

    public void goodsExportListener(IMethod iMethod) {
        btnGoodsExport.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                iMethod.method();
            }
        });
        miGoodsExport.addActionListener(e -> iMethod.method());
    }

    public void goodsMoveListener(IMethod iMethod) {
        btnGoodsMove.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                iMethod.method();
            }
        });
        miGoodsMove.addActionListener(e -> iMethod.method());
    }

    public void goodsReceiptListener(IMethod iMethod) {
        btnGoodsReceipt.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                iMethod.method();
            }
        });
        miGoodsReceipt.addActionListener(e -> iMethod.method());
    }

    public void logoutListener(IMethod iMethod) {
        btnLogout.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                iMethod.method();
            }
        });
        miLogout.addActionListener(e -> iMethod.method());
    }
    
    public void showStorageListener(IMethod iMethod) {
        btnShowStorage.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                iMethod.method();
            }
        });
        miShowStorage.addActionListener(e -> iMethod.method());
    }

    public void btnAcceptGoodsAddListener(MouseAdapter adapter) {
        btnAcceptGoods.addMouseListener(adapter);
    }

    public JPanel getpLogin() {
        return pLogin;
    }

    public void setLbName(String text) {
        this.lbName.setText(text);
    }

    public void setLbUsername(String text) {
        this.lbUsername.setText(text);
    }

    public void setTfGoodsCode(String text) {
        this.tfGoodsCode.setText(text);
    }

    public void setTfQuantity(String text) {
        this.tfQuantity.setText(text);
    }

    public void setTfStorageCode(String text) {
        this.tfStorageCode.setText(text);
    }

    public void btnMoveGoodsAddListener(MouseAdapter adapter) {
        btnMoveGoods.addMouseListener(adapter);
    }

    public JTable getTbFreeStorage1Table() {
        return tbFreeStorage1;
    }
    
     public DefaultTableModel getTbFreeStorage1Model() {
        return (DefaultTableModel) tbFreeStorage1.getModel();
    }

    public JTable getTbGoodsTable() {
        return tbGoods;
    }
    
    public DefaultTableModel getTbGoodsModel() {
        return (DefaultTableModel) tbGoods.getModel();
    }

    public int getTfQuantity1() {
        try {
            if (tfQuantity1.getText().equals("")) {
                return 0;
            }
            return Integer.parseInt(tfQuantity1.getText());
        } catch (NumberFormatException e) {
            return -1;
        }
    }

    public String getTfStorageCode1() {
        return tfStorageCode1.getText().trim();
    }

    public JScrollPane getSpGoodsMove() {
        return spGoodsMove;
    }

    public void setTfQuantity1(String text) {
        this.tfQuantity1.setText(text);
    }

    public void setTfStorageCode1(String text) {
        this.tfStorageCode1.setText(text);
    }

    public void setLbChoosedItem(String text) {
        this.lbChoosedItem.setText(text);
    }

    public void btnExportGoodsAddListener(MouseAdapter adapter) {
        btnExportGoods.addMouseListener(adapter);
    }

    public JCheckBox getChbStorageStatus1() {
        return chbStorageStatus1;
    }

    public void setLbChoosedItem1(String text) {
        lbChoosedItem1.setText(text);
    }

    public JTable getTbGoods1Table() {
        return tbGoods1;
    }
    
    public DefaultTableModel getTbGoods1Model() {
        return (DefaultTableModel) tbGoods1.getModel();
    }

    public int getTfQuantity2() {
        try {
            if (tfQuantity2.getText().equals("")) {
                return 0;
            }
            return Integer.parseInt(tfQuantity2.getText());
        } catch (NumberFormatException e) {
            return -1;
        }
    }
    
    public void setTfQuantity2(String text) {
        tfQuantity2.setText(text);
    }

    public JScrollPane getSpGoodsExport() {
        return spGoodsExport;
    }
    
    
    
    

    public void removeListeners() {
        //Login panel
        for (MouseListener ml : btnLogout.getMouseListeners()) {
            btnLogout.removeMouseListener(ml);
        }
        for (MouseListener ml : btnChangePassword.getMouseListeners()) {
            btnChangePassword.removeMouseListener(ml);
        }
        
        //GoodsReceipt panel
        for (MouseListener ml : btnAcceptGoods.getMouseListeners()) {
            btnAcceptGoods.removeMouseListener(ml);
        }
        for (MouseListener ml : tbFreeStorage.getMouseListeners()) {
            tbFreeStorage.removeMouseListener(ml);
        }
        
        //GoodsMove panel
        for (MouseListener ml : btnMoveGoods.getMouseListeners()) {
            btnMoveGoods.removeMouseListener(ml);
        }
        for (MouseListener ml : tbFreeStorage1.getMouseListeners()) {
            tbFreeStorage1.removeMouseListener(ml);
        }
        for (MouseListener ml : tbGoods.getMouseListeners()) {
            tbGoods.removeMouseListener(ml);
        }
        
        //GoodsExport panel
        for (MouseListener ml : btnExportGoods.getMouseListeners()) {
            btnExportGoods.removeMouseListener(ml);
        }
        for (MouseListener ml : tbGoods1.getMouseListeners()) {
            tbGoods1.removeMouseListener(ml);
        }
    }

}
